<!DOCTYPE HTML>
<html>



<head>
  <title>Estadística Computacional</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta name="description" content="website description" />
  <meta name="keywords" content="website keywords, website keywords" />
  <meta http-equiv="content-type" content="text/html; charset=windows-1252" />
  <link rel="stylesheet" type="text/css" href="style/style.css" />
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3.0.1/es5/tex-mml-chtml.js"></script>

</head>

<body>
  <div id="main">
    <div id="header">
      <div id="logo">
        <div id="logo_text">
          <!-- class="logo_colour", allows you to change the colour of the text -->
          <h1><a href="principal.html">Estadística<span class="logo_colour">Computacional</span></a></h1>
          <h2>Trabajo final. Knitr en R</h2>
        </div>
      </div>
      <div id="menubar">
        <ul id="menu">
          <li><a href="principal.html">Principal</a></li>
          <li class="selected"><a href="1.html">Ejercicios</a></li>
        </ul>
      </div>
    </div>
    <div id="content_header"></div>
    <div id="site_content">
      <div id="sidebar_container">
        <div class="sidebar">
          <div class="sidebar_top"></div>
          <div class="sidebar_item">
            <!-- insert your sidebar items here -->
            <h3>Alberto J.Durán López</h3>
            <h4>Estadística Computacional</h4>
            <h5>10/06/2020</h5>
            <p>Ing. Informática y Matemáticas </p>  
	    <input name="search" type="image" style="border: 0; margin: 0 0 -9px 5px;" src="style/logoalter1.jpg" alt="Search" title="Search" />
	    <p>  </p>
	    <p> Pulse <a href="https://github.com/thealberteitor">aquí</a> para ver más proyectos personales</p> 

	</div>
          <div class="sidebar_base"></div>
        </div>
        <div class="sidebar">
          <div class="sidebar_top"></div>
          <div class="sidebar_item">
            <h3>Enlaces de interés</h3>
            <ul>
	      <li>E-mail: albduranlopez@correo.ugr.es  </li>
              <li><a href="https://www.r-project.org/">Documentación de R</a></li>
              
            </ul>
          </div>
          <div class="sidebar_base"></div>
        </div>
        <div class="sidebar">
          <div class="sidebar_top"></div>
          <div class="sidebar_item">
            <h3>Search</h3>
            <form method="post" action="#" id="search_form">
              <p>
                <input class="search" type="text" name="search_field" value="Enter keywords....." />
                <input name="search" type="image" style="border: 0; margin: 0 0 -9px 5px;" src="style/search.png" alt="Search" title="Search" />
              </p>
            </form>
          </div>
          <div class="sidebar_base"></div>
        </div>
      </div>
      <div id="content">
        <!-- insert the page content here -->
	<H3>Índice</H3>
	<hr>
		<ul>
			<li><a href="#E1">Ejercicio 1</a></li>
			<li><a href="#E2">Ejercicio 2</a></li>
			<li><a href="#E3">Ejercicio 3</a></li>
			<li><a href="#E4">Ejercicio 4</a></li>
			<li><a href="#E5">Ejercicio 5</a></li>
			<li><a href="#E6">Ejercicio 6</a></li>
			<li><a href="#E7">Ejercicio 7</a></li>
			<li><a href="#E8">Ejercicio 8</a></li>
			<li><a href="#E9">Ejercicio 9</a></li>
			<li><a href="#CC">Conclusiones</a></li>
		</ul>
	
	<hr>

	
	<h2>
		<a name="E1">Ejercicio 1</a>
	</h2>

	<p><FONT SIZE=3> Considera en el plano el recinto cerrado finito definido por las funciones \(y=x^2\) y \(100 x=y^2\) al cual pertenece el punto de coordenadas 
	\((2,12)\). Realiza un gráfico del mismo. </font></p>


	<p>Comenzamos creando una función que llamaremos <b>dibuja_recinto</b> y recibirá 4 parámetros que se usarán
	para establecer los límites de \(x\) e \(y\). En ella, definimos las funciones que delimitarán nuestro recinto, separando 
	\(100 x=y^2\) en sus dos ramas parabólicas en la dirección del eje \(OX\): \(y= \pm \sqrt{100x} \) </p>

	<!--begin.rcode 
	dibuja_recinto <- function(x0,xf, y0,yf){
		first = function(x){x^2}
		second = function(x){sqrt(100*x)}
		third= function(x){-sqrt(100*x)}
		plot(c(0,1), c(0,1), type="n", xlab="x", ylab="y", xlim=c(x0,xf), ylim=c(y0,yf))
		curve(first(x), col="goldenrod1", add=T, lwd=2)
		curve(second(x), col="indianred4", xlim=c(0,xf), add=T, lwd=2)
		curve(third(x), col="indianred4", xlim=c(0,xf), add=T, lwd=2)
		legend("topleft", inset=.02, legend=c("y=x^2", "y^2=100*x"), 
			col=c("goldenrod1","indianred4", "indianred4"), lty=1, box.lty=0, cex=0.8)
	}
	end.rcode-->

	<br>
	<p>Por otro lado, haciendo uso de <b>points</b>, añadimos una función que recibe un punto y lo representa gráficamente:</p>
	
	<!--begin.rcode
	dibuja_punto <- function(x,y, text){
		points(x, y, pch=20)
		if(text == TRUE)
			text(x+0.1, y, toString(c(x,y)),col="black",cex=0.8,adj=0)
	}
	end.rcode-->

	<br>
	<p>Realizamos una primera llamada a <b>dibuja_recinto</b>, comprobando que el punto \((2,12)\) se encuentra
	en el recinto delimitado por las funciones \(y=x^2\) y la rama parabólica positiva de \(y^2 = 100x\)</p>
	<br>
	<!--begin.rcode fig.align='center'
	dibuja_recinto(0,5, -25,25)
	dibuja_punto(2,12, text=TRUE)
	end.rcode-->

	<p>Por ello, nuestra función original admite una simplificación y quedará de la siguiente forma: </p>
	<!--begin.rcode
	dibuja_recinto <- function(x0,xf, y0,yf){
		first = function(x){x^2}
		second = function(x){sqrt(100*x)}
		plot(c(0,1), c(0,1), type="n", xlab="x", ylab="y", xlim=c(x0,xf), ylim=c(y0,yf))
		curve(first(x), col="goldenrod1", add=T, lwd=2)
		curve(second(x), col="indianred4", xlim=c(0,xf), add=T, lwd=2)
		legend("topleft", inset=.02, legend=c("y=x^2", "sqrt(100*x)"), 
			col=c("goldenrod1","indianred4"), lty=1, box.lty=0, cex=0.8)
	}
	end.rcode-->


	<br>
	<!--begin.rcode fig.align='center'
	dibuja_recinto(0,5, 0,25)
	dibuja_punto(2,12, text=TRUE)
	end.rcode-->

	<h2>
		<a name="E2">Ejercicio 2</a>
	</h2>
	<p><FONT SIZE=3>Construye una función que indique si un punto cualquiera del plano pertenece al interior de ese recinto, al borde o al exterior. 
	Comprueba que \((2,12)\) es interior. Aplícala a los puntos \((0,0)\), \((-1,-1)\) y \((30,30)\) y comenta los resultados.
	</font></p>

	<p>Definimos una función denominada <b>posicion</b>, que recibirá ambas coordenadas del punto que queramos comprobar y devolverá su posición
	respecto a nuestro recinto definido.
	El funcionamiento es muy sencillo: 
	<ol>
		<li> Si el punto se encuentra por debajo de la gráfica de \(y=x^2\) o por encima de \(y=\sqrt{100}\), será exterior.
		<li> Si el punto se encuentra entre las dos gráficas, será interior.
		<li> En caso contrario, si el punto se encuentra sobre cualquiera de las gráficas, en el primer cuadrante, será frontera.
	</ol>	
	</p>
	
	<!--begin.rcode 
	posicion <- function(x,y){
		if (y>x^2 & y^2<100*x)
			es = "interior"
		else if (y<x^2 | y^2>100*x | x<0 | y<0)
			es = "exterior"
		else
			es = "frontera"
		return (es)
	}
	end.rcode-->

	<br>
	<p>Comprobamos si los distintos puntos dados son interiores, exteriores o frontera: </p>
	<!--begin.rcode 
	posicion(2,12)
	posicion(0,0)	
	posicion(-1,1)	
	posicion(30,30)
	end.rcode-->

	<p>
	<ol>
		<li> \((2,12)\) : Claramente es interior, se encuentra en el recinto delimitado por las dos funciones.
		<li> \((0,0)\) : Es frontera, ya que no cumple las condiciones de ser punto interior y exterior y, además, pertenece a ambas gráficas.
		<li> \((30,30)\) : Es exterior ya que se encuentra por encima de la función \(y=\sqrt{100x}\)
		<li> \((-1,1)\) : Es exterior ya que aunque cumple la ecuación \(y=x^2\), no pertenece al primer cuadrante.
	</ol>
	</p>
	
	<br>
	<p>Además de los resultados mostrados anteriormente, podemos reutilizar la función del <i>Ejercicio 1</i>, mostrar los
	diferentes puntos y ver su posición respecto a nuestro recinto acotado. Realizamos la representación de ellos
	redimensionando nuestro recinto (no mostramos el punto \((30,30)\) ya que se encuentra muy alejado del resto y la representación
	del gráfico sería muy pequeña)</p>

	<!--begin.rcode fig.align='center'
	dibuja_recinto(-1,5, 0,25)
	dibuja_punto(2,12, text=TRUE)
	dibuja_punto(0,0, text=TRUE)
	dibuja_punto(-1,1, text=TRUE)
	end.rcode-->


	<h2>
		<a name="E3">Ejercicio 3</a>
	</h2>
	<p><FONT SIZE=3>Construye una función que seleccione un valor, que llamamos \(A\), de una distribución uniforme en el intervalo (-1/100,1/100), y otro, que llamamos \(B\),
	de una distribución normal de media 0 y varianza 1/100. Añade \((A,B)\) al punto \((2,12)\) y obtendrás un punto que llamaremos
 	\(P_0\).</font></p>


	<p>Para la realización de este ejercicio, hacemos uso de las funciones <b>runif</b> y
	<b>rnorm</b>, que nos proporcionarán valores de la distribución uniforme y normal, respectivamente. </p>

	<p>Se ha realizado una función encapsulando ambas llamadas y que recibirá 3 parámetros.
	Los dos primeros hacen referencia a las coordenadas del punto inicial, \((2,12)\) en nuestro caso
	y, el tercero, que hace referencia al valor usado tanto para el intervalo de la distribución uniforme
	como para la desviación típica de la normal: \(\sqrt{1/100}\) </p>

	<!--begin.rcode
	aniade <- function(x, y, a){ 
		A<-runif(1, min=-a, max=a)
		B<-rnorm(1, mean=0, sd=sqrt(a))

		return (c(x+A, y+B))
	}
	end.rcode-->


	<br>

	<p>Llamamos a la función anterior y obtenemos el nuevo punto \(p_0\) </p>
	<!--begin.rcode
	p0<-aniade(2, 12, 1/100)
	p0
	end.rcode-->


	<h2>
		<a name="E4">Ejercicio 4</a>
	</h2>
	<p><FONT SIZE=3>Considera el recorrido aleatorio con barrera absorbente definido del siguiente modo: sea un punto que en el tiempo \(t=0\) 
	comienza en el origen,  \(P_0\) del apartado anterior, y se desplaza del siguiente modo:
		<ol>
			<li> En cada tiempo \(t, t=1,2,\ldots\) se lanza un dado dos veces y una moneda dos veces.
			<li> Si la suma de puntos de los dados es superior a \(5\), 
			la coordenada \(x\) del punto se modifica para que aumente \(5\) centésimas, si no, 
					disminuye \(5\) centésimas.
			<li> Si las dos monedas son cara, la coordenada \(y\) del punto se modifica para que aumente \(5\) centésimas, 
					si las dos son cruz, permanece inalterable y si no, 
					disminuye \(5\) centésimas.
			<li> A continuación el punto salta hasta sus nuevas coordenadas
			<li> El proceso finaliza si, tras el salto, el punto alcanza el perímetro de la región o el exterior de la misma
		</ol>

    	Escribe una función que simule el movimiento del punto y devuelva, para un número máximo, \(M\), de pasos:
		<ol>
			<li>        La progresión aleatoria definida
			<li>        Cuantos pasos han sido necesarios para llegar al límite o NA si no lo consigue
		</ol>
	</font></p>


	<p> Comenzamos definiendo las dos funciones que simulan el lanzamiento de una moneda y de un dado, respectivamente.
	Las dos reciben un parámetro, n, que indicará el número de monedas o dados a lanzar.</p>
	<!--begin.rcode
	lanz_monedas<-function(n){
  	return (sample(c("cara","cruz"), size=n))
	}

	lanz_dados<-function(n){
  	return(sample(c(1:6), replace=TRUE, size=n))
	}
	end.rcode-->

	<br>
	<p>Ahora bien, añadimos la función que establecerá el recorrido aleatorio con barrera absorbente que se ha descrito en el enunciado.
	Se reciben 3 parámetros, los dos primeros indican las coordenadas del punto de partida y el segundo, M, hace referencia al número de pasos
	 que se realizarán como máximo.</p>
	<br>
	<!--begin.rcode
	recorrido_aleat<-function(x,y, M){
		coord_x <- x
		coord_y <- y
	
		pasos <- 0

		for(i in 1:M){
			monedas <- lanz_monedas(2)
			dados <- lanz_dados(2)

			if(sum(dados)>5)
				x=x+0.05
			else
				x=x-0.05

			if(monedas[1]=="cara" & monedas[2]=="cara")
				y=y+0.05
			else if(monedas[1]=="cruz" & monedas[2]=="cruz")
				y=y
			else
				y=y-0.05
		
			coord_x <- c(coord_x, x)
			coord_y <- c(coord_y, y)

			pasos <- pasos+1

			if(posicion(x,y)!="interior")
				break;
		}
		if(pasos == M)
			pasos = NA
		return(list(CX=coord_x, CY=coord_y, P=pasos))	
	}
	end.rcode-->
	<br>
	<p>Llamamos a la función anterior para probar que funciona correctamente. En total, realizaremos
	dos llamadas, una con \(M=5\) y otra con \(M=60\).
	En la primera, como es lógico, nuestro punto no podrá salir del recinto ya que el número de pasos
	es muy pequeño (devolverá NA) mientras que en la segunda... ¡Veámoslo!</p>
	<!--begin.rcode
	rec <- recorrido_aleat(p0[1],p0[2], 5)
	rec
	end.rcode-->

	<!--begin.rcode
	rec2 <- recorrido_aleat(p0[1],p0[2], 60)
	rec2
	end.rcode-->





	<h2>
		<a name="E5">Ejercicio 5</a>
	</h2>
	<p><FONT SIZE=3>Realiza una simulación concreta del proceso con \(M=10000\) 
	y represéntala gráficamente (mediante líneas) sobre la 
	gráfica de la región.</font></p>



	<p>Realizaremos la simulación basándonos en la siguiente función. Se le pasará la
	progresión obtenida, el tipo de representación (lines/points) y el color que se usará para dicha
	representación. </p>


	<!--begin.rcode
	dibuja_simulacion <- function(total, tipo, color){
		if(tipo == "lines")
			lines(x=total$CX, y=total$CY, col=color, cex=0.6)
		else if(tipo == "points")
			points(x=total$CX, y=total$CY, pch=1, col=color, cex=1)
		else
			print("Introduzca un tipo de representación válida")
	}
	end.rcode-->
	
	<br>
	<p>En nuestro caso, llamamos a la función con \(M=10000\), pero antes, debemos
	dibujar nuestro recinto usando la función programada en el Ejercicio 1. Por último,
	indicamos (como nos pide el ejercicio) que la representación gráfica se haga
	mediante líneas:</p>

	<!--begin.rcode fig.align='center'
	total <- recorrido_aleat(p0[1], p0[2], 10000)
	dibuja_recinto(0,5, 0,25)
	dibuja_simulacion(total, tipo="lines", color="black")
	end.rcode-->



	<h2>
		<a name="E6">Ejercicio 6</a>
	</h2>
	<p><FONT SIZE=3>Realiza esta misma representación gráfica centrada en 
	el punto de salida y con una anchura y altura de 2 unidades.</font></p>	

	<p>Volvemos a realizar la misma representación que en el ejercicio anterior.
	Sin embargo, debemos modificar lévemente la función que dibuja nuestro recinto.
	Para ello, añadiremos un parámetro <b>c</b> a nuestra función <b>dibuja_recinto_centrado</b>
	que usará <b>plot</b> para indicar que los nuevos límites de <b>x</b> y de <b>y</b> sean 
	\((x-c, x-c)\) y  \((y-c, y+c)\), respectivamente.
	</p>
	
	<!--begin.rcode
	dibuja_recinto_centrado <- function(x,y,c){
		first = function(x){x^2}
		second = function(x){sqrt(100*x)}
		plot(c(0,1), c(0,1), xlab="x", ylab="y", type="n", xlim=c(x-c,x+c), ylim=c(y-c,y+c))
		curve(first(x), col="goldenrod1", add=T, lwd=2)
		curve(second(x), col="indianred4", add=T, lwd=2)
		legend("topleft", inset=.02, legend=c("y=x^2", "sqrt(100*x)"), 
			col=c("goldenrod1","indianred4"), lty=1, box.lty=0, cex=0.8)
	}
	end.rcode-->

	
	<br>
	<p>En nuestro caso, llamamos a la función con un valor de \(c=2\), pudiendo éste ser modificado
	sin ningún problema y teniendo en cuenta que a mayor valor de \(c\), más alejado veremos nuestra representación gráfica.</p>
	<!--begin.rcode fig.align='center', warning=F
	dibuja_recinto_centrado(p0[1],p0[2], c=2)
	dibuja_punto(p0[1], p0[2], text=FALSE)
	dibuja_simulacion(total, tipo="lines", color="black")	
	end.rcode-->




	<h2>
		<a name="E7">Ejercicio 7</a>
	</h2>
	<p><FONT SIZE=3>Realiza cuatro simulaciones concretas del proceso con 
	\(M=6000\) y represéntalas gráficamente sobre la gráfica de 
	la región utilizando colores distintos para cada una</font></p>




	<br>
	<p>Este ejercicio se ha interpretado según 2 versiones: 

	<ol>
		<li> Realizar cuatro simulaciones y representarlas sobre una misma gráfica
		<li> Realizar cuatro simulaciones y representarlas sobre distintas gráficas (usaremos <b>par</b>)
	</ol>
	</p>

	<p>Realizamos una función que recoja ambas versiones y actuará una u otra según el valor de la variable
	<b>juntas</b> pasado por argumento. Otros parámetros necesarios para la representación son:

	<ol>
		<li> \(p_0\) : Se trata del punto inicial de partida.
		<li> colores: Contiene los diferentes colores para la representación de cada simulación. Se realizarán tantas simulaciones como nº de colores indicados.
		<li> tipo: Puede ser lines o points.
		<li> M: nº máximo de pasos.		
	</ol>
	</p>		


	<!--begin.rcode
	dibuja_simulaciones <- function(juntas=FALSE, p0, colores, tipo, M){
	
		if(juntas==TRUE){
			dibuja_recinto_centrado(p0[1],p0[2], c=2)
			dibuja_punto(p0[1], p0[2], text=FALSE)
	
			for(i in 1:length(colores)){
				rec<-recorrido_aleat(p0[1], p0[2], M)
				dibuja_simulacion(rec, tipo, color=colores[i])
			}
		}
		else{
			col<-2
			fil<-ceiling(length(colores)/col)
			par(mfrow=c(fil,col))
			for(i in 1:(fil*col)){
				dibuja_recinto_centrado(p0[1],p0[2], c=2)
				dibuja_punto(p0[1], p0[2], text=FALSE)
				rec<-recorrido_aleat(p0[1], p0[2], M)
				dibuja_simulacion(rec, tipo, color=colores[i])
			}
		}
	}
	end.rcode-->


	<br>
	<p>Realizamos una primera representación llamando a la función anterior e indicando
	con el parámetro \(juntas=FALSE\) que queremos que se representen en gráficas independientes:</p> 

	<!--begin.rcode fig.align='center', warning=F
	dibuja_recinto_centrado(p0[1],p0[2], c=2)
	dibuja_punto(p0[1], p0[2], text=FALSE)
	colores<-c("darkorange", "ivory4", "forestgreen", "maroon4")
	dibuja_simulaciones(juntas=FALSE, p0, colores, "lines", 10000)
	end.rcode-->


	<br>
	<p>Por otro lado, probamos de nuevo la función anterior indicando que queremos la representación de todas las simulaciones
	en un único gráfico, \(juntas=TRUE\). Se realizarán 2 llamadas, una usando <b>lines</b> y otra usando <b>points</b>.</p>
	<!--begin.rcode fig.align='center', warning=F
	dibuja_recinto_centrado(p0[1],p0[2], c=2)
	dibuja_punto(p0[1], p0[2], text=FALSE)
	colores<-c("darkorange", "ivory4", "forestgreen", "maroon4")
	dibuja_simulaciones(juntas=TRUE, p0, colores, "lines", 10000)
	end.rcode-->


	
	<br>
	<!--begin.rcode fig.align='center', warning=F
	dibuja_recinto_centrado(p0[1],p0[2], c=2)
	dibuja_punto(p0[1], p0[2], text=FALSE)
	colores<-c("darkorange", "ivory4", "forestgreen", "maroon4")
	dibuja_simulaciones(juntas=TRUE, p0, colores, "points", 10000)
	end.rcode-->


	<h2>
		<a name="E8">Ejercicio 8</a>
	</h2>
	<p><FONT SIZE=3>Escribe una función con un argumento que permita repetir 
	un número de veces, n, este proceso y devuelva un vector con
	 el número de pasos necesarios para salir del recinto en cada 
	repetición.</font></p>


	<p>Para realizar esta función, simplemente tenemos que realizar un bucle que llame
	un total de <b>n</b> veces a la función que simula el recorrido aleatorio.
	Se le pasarán un total de 3 parámetros, el punto inicial \(p_0\), y los valores
	<b>n</b> y <b>m</b> que indican el nº de repeticiones del proceso y el nº máximo
	de pasos a realizar en cada repetición, respectivamente.</p>

	<!--begin.rcode
	distribucion_recorridos<-function(p0, n, M){
		total<-c()
		for(i in 1:n)
			total<-c(recorrido_aleat(p0[1], p0[2], M)$P, total)
		return(total)
	}
	end.rcode-->


	<br>
	<p>Mostramos el correcto funcionamiento de la función y mostramos los resultados obtenidos tras una llamada con 
	los parámetros \(n=10\) y \(M=60\)</p>
	<!--begin.rcode
	distri<-distribucion_recorridos(p0, 10, 60)
	distri
	end.rcode-->


	<h2>
		<a name="E9">Ejercicio 9</a>
	</h2>
	<p><FONT SIZE=3>Analiza el vector que se obtiene con la función anterior para 
	\(N=1000\) y \(M=3000\) y comenta cómo es la distribución del parámetro 
	<i>pasos necesarios para llegar al límite</i> en este proceso. ¿Es M 
	suficientemente grande? A la luz de lo obtenido, indica
	 razonadamente si habría que usar un valor mayor o no, y en caso 
	afirmativo, repítelo alterando el valor de M.</font></p>

	<!--begin.rcode
	min(distri)
	min(distri, na.rm=TRUE)
	end.rcode-->

	<br>
	<p> En vista de los valores que toma <b>distri</b> del ejercicio anterior y debido a la presencia de valores NA, funciones como la anterior no funcionarían correctamente.
	A pesar de que <b>R</b> nos ofrece funciones o parámetros como \(na.rm = TRUE\) que nos ayudan a lidiar con 
	este tipo de problemas, es preferible incrementar el valor de M
	para poder estudiar la distribución a la que pertenece nuestro vector sin presencia de valores perdidos/NA. </p>

	<br>
	<p>Realizamos una simulación del proceso con \(N=1000\) y \(M=3000\)

	<!--begin.rcode
	N<-1000
	M<-3000
	pasos_necesarios <- distribucion_recorridos(p0, N, M)
	end.rcode-->

	<br>
	<p>Realizamos un resumen del vector obtenido. 
	A continuación, podemos ver los distintos valores que representan
	el mínimo, media, máximo, entre otros.</p>
	
	<!--begin.rcode 
	summary(pasos_necesarios)
	end.rcode-->

	<br>
	<p>Mostramos a continuación el histograma obtenido:</p>


	<!--begin.rcode fig.align='center'
	hist(pasos_necesarios, xlab="pasos necesarios", ylab="Frecuencia",
		main="Pasos necesarios para llegar al límite", col="gray47", border="black")
	
	end.rcode-->
	
	<p>A priori, nos vienen a la mente las siguientes distribuciones: 
	<ol>
		<li> <b>Uniforme</b> en el intervalo \([a,b ] = [min(pasos\_necesarios), max(pasos\_necesarios)] \). Sin embargo, al 
		ver el histograma anterior podemos observar que los datos no se distribuyen uniformemente en todo el intervalo por lo 
		que descartamos esta distribución.
		<li> <b>Poisson</b> de parámetro \(lambda = mean(pasos\_necesarios)\). Esta distribución es apropiada
		para variables aleatorias \(X\) que representan el número de ocurrencias de un suceso durante un periodo
		de tiempo fijo o en una región fija del espacio.
		<li> <b>Normal</b> de media \(mean(pasos\_necesarios)\) y desviación típica \(sd(pasos\_necesarios)\)
	</ol>
	</p>

	<p>El siguiente paso que haremos será representar las distintas distribuciones a partir
	de los valores que hemos obtenido, es decir, generaremos curvas teóricas a partir
	de los valores del mínimo, media, desviación y máximo de nuestro conjunto de <i>pasos necesarios para
	llegar al límite</i></p>
	

	<!--begin.rcode fig.align='center'

	hist(pasos_necesarios,  prob=T, xlab="Pasos necesarios", ylab="dDensidad",
	main="Pasos necesarios para llegar al límite", col="gray47", border="black", ylim=c(0,0.055))
	
	lines(density(pasos_necesarios), lwd=2, col="chocolate3")
	
	curve(dunif(x, min=min(pasos_necesarios), max=max(pasos_necesarios)), add=T, lwd=2, col="orange")
	curve(dnorm(x, mean=mean(pasos_necesarios), sd=sd(pasos_necesarios)) , add=T, lwd=2, col="dodgerblue")
	lines(0:max(pasos_necesarios), dpois(0:max(pasos_necesarios),
		lambda=mean(pasos_necesarios)), lwd=2, col="red3")
	#curve(dpois(x, lambda=mean(pasos_necesarios)), add=T, lwd=2, col="red3")
	

	u <- paste("Uniforme" , "(a=" ,min(pasos_necesarios), "," , "b=", max(pasos_necesarios), ")" )
	n <- paste("Normal" , "(µ=" ,round(mean(pasos_necesarios),2), "," , "σ= " , round(sd(pasos_necesarios),2) , ")" )
	p <- paste("Poisson" , "(L=" ,round(mean(pasos_necesarios),2) , ")" )

	u<-gsub("\\s", replacement="", x=u)
	n<-gsub("\\s", replacement="", x=n)
	p<-gsub("\\s", replacement="", x=p)
	

	legend("topright", legend=c("Pasos necesarios", u , n, p),  lwd=2,
		col=c("chocolate3","orange", "dodgerblue", "red3"), lty=1, box.lty=0, cex=0.9)

	end.rcode-->


	

	<p>Podemos observar que la curva de densidad que mejor se adapta a nuestros datos
	es la <b>Normal</b> de media \(mean(pasos\_necesarios)\) y desviación típica \(sd(pasos\_necesarios)\).
	Por tanto, la curva de nuestra muestra se ajusta a una distribución normal.</p>


	<br>
	<p>Antes de responder sobre la pregunta del apropiado de \(M\), veremos
	el valor máximo requerido en todas las simulaciones para que nuestro 
	punto salga del recinto: </p>	
	<!--begin.rcode
	max(pasos_necesarios)
	end.rcode-->
	
	<br>
	<p>Es decir, de las 1000 ejecuciones o simulaciones realizadas,
	el valor máximo requerido para que el punto inicial salga del
	recinto está muy por debajo de los \(M=3000\) usados en la ejecución
	por lo que no haría falta repetir el proceso para un número mayor.</p>
	
	<p>Bien es cierto que si ejecutamos la primera vez <i> 'a ciegas' </i> no sabemos
	a partir de qué valor nuestro punto saldrá del recinto por lo que es recomendable
	tomar un valor inicial relativamente grande para no tener ningún valor perdido.</p> 
	

	<h2>
		<a name="CC">Conclusiones</a>
	</h2>
	
	
	<p><b>R</b> es un entorno y lenguaje de programación con un enfoque estadístico
	muy útil para el tratamiento y visualización de datos. Es la primera vez
	que he usado este lenguaje, sin embargo, estoy satisfecho con la labor realizada en la asignatura.
	Se me ha hecho muy entrenida y la verdad, programar en R facilita en gran medida
	el estudio estadístico que se desea realizar.</p>
	
	<p>En relación tanto con esta práctica como con las anteriores, se ha tendido a modularizar
	usando funciones para evitar la programación redundante. Por ello, todo lo realizado
	aquí podría extrapolarse a casos más generales.</p>

	<p>Como bien hemos comentado, para la realización de este proyecto
	partíamos únicamente del libro <i>knitr</i>, usado para la generación
	automática de este <b>HTML</b>. Todo lo demás se ha programado con la ayuda
	de la documentación oficial, especialmente haciendo uso de la función <b>help()</b>,
	la cual nos muestra información del comando pasado como argumento.</p>
	
	<p>En total, este trabajo se puede dividir en 3 partes:

	<ol>
		<li> <b>Representación gráfica:</b> Con ayuda de funciones como <b>plot</b> o <b>curve</b>
		se ha creado y delimitado nuestro recinto. Además, usando <b>points</b>, se han reprentado numerosos
		puntos para ver si eran exteriores, interiores o frontera, entre ellos nuestro punto inicial, obtenido
		tras añadir un punto \((A,B)\) al \((2,12)\). </li>

		<li> <b>Programación del recorrido aleatorio con barrera absorbente:</b> Se han seguido las pautas indicadas
		en el ejercicio para la simulación del movimiento. Cabe destacar el uso de dos funciones
		que determinaran y describirán la trayectoria que tomará nuestro punto. Estas son: <b>lanz_monedas</b> y
		<b>lanz_dados</b>, que recibirán un parámetro <b>n</b> que indica el número de lanzamientos a realizar.
		<br>
		Después, usando <b>lines</b> y <b>points</b> se han representado en varias gráficas las diferentes trayectorias
		que han tomado nuestras simulaciones. </li>


		<li> <b>Estudio de la distribución del parámetro</b> <i>pasos necesarios para llegar al límite</i>:
		Una vez llamada a la función que simula el recorrido aleatorio de nuestro punto, se ha estudiado la distribución
		obtenida con \(N=1000, M=3000\) concluyendo que no era necesario aumentar el valor de \(M\) 
		pero sí conveniente usar un valor relativamente alto. 
		<br>
		Por último, se han mostrado en un gráfico las diferentes curvas teóricas de distribuciones conocidas, de forma
		que la distrbución que mejor se ha ajustado ha sido la distribución Normal. (con la misma media y 
		desviación típica que la simulación obtenida).</li>
	</ol>
	</p>


	
      </div>
    </div>
    <div id="content_footer"></div>
    <div id="footer">
      <p><a href="principal.html">Principal</a> | <a href="1.html">Ejercicios</a></p>
      <p>Copyright &copy; simplestyle_horizon | <a href="http://validator.w3.org/check?uri=referer">HTML5</a> | <a href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a> | <a href="http://www.html5webtemplates.co.uk">Simple web templates by HTML5</a></p>
    </div>
  </div>
</body>
</html>
